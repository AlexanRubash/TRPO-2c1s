В JavaScript любые текстовые данные являются строками. Не существует отдельного типа «символ»

----------------------------------------Кавычки----------------------------------------

В JavaScript есть разные типы кавычек. Строку можно создать с помощью одинарных, двойных либо обратных кавычек.
Одинарные и двойные кавычки работают, по сути, одинаково

если использовать обратные кавычки, то в такую строку можно вставлять произвольные выражения, обернув их в ${…}:
function sum(a, b) {
  return a + b;
}
alert(`1 + 2 = ${sum(1, 2)}.`); // 1 + 2 = 3.

Ещё одно преимущество обратных кавычек – они могут занимать более одной строки, вот так:
let guestList = `Guests:
 * John
 * Pete
 * Mary
`;
alert(guestList); 

----------------------------------------Спецсимволы-----

«символ перевода строки», который записывается как \n: 
let guestList = "Guests:\n * John\n * Pete\n * Mary";

\', \"	- Кавычки
\\	- Обратный слеш
\t	- Знак табуляции
\uXXXX	- Символ в кодировке UTF-16 с шестнадцатеричным кодом XXXX

-------------Длина строки------
Свойство length содержит длину строки:
alert( `My\n`.length ); // 3

--------------------------Доступ к символам------------------

let str = `Hello`;

// первый символ
alert( str[0] ); // H
alert( str.charAt(0) ); // H

// последний символ
alert( str[str.length - 1] ); // o

Разница только в том, что если символ с такой позицией отсутствует, тогда [] вернёт undefined, а charAt – пустую строку:
let str = `Hello`;
alert( str[1000] ); // undefined
alert( str.charAt(1000) ); // '' 

---------------------------Изменение регистра
Методы toLowerCase() и toUpperCase() меняют регистр символов:
alert( 'Interface'.toUpperCase() ); // INTERFACE
alert( 'Interface'.toLowerCase() ); // interface

---------------------------Поиск подстроки

let str = 'Widget with id';
alert( str.indexOf('Widget') ); // 0, т.к. подстрока 'Widget' найдена в начале
alert( str.indexOf('widget') ); // -1, поиск чувствителен к регистру
alert( str.indexOf("id") ); // 1

------------------Методы includes, startsWith, endsWith

str.includes(substr, pos) возвращает true, если в строке str есть подстрока substr, либо false, если нет.

Методы str.startsWith и str.endsWith проверяют, соответственно, начинается ли и заканчивается ли строка определённой строкой:
alert( "Widget".startsWith("Wid") ); // true, "Wid" – начало "Widget"
alert( "Widget".endsWith("get") ); // true, "get" – окончание "Widget"

-------------------Получение подстроки

str.slice(start [, end]) – возвращает часть строки от start до (не включая) end.
let str = "stringify";
// 'strin', символы от 0 до 5 (не включая 5)
alert( str.slice(0, 5) ); 

str.substring(start [, end]) -Это почти то же, что и slice, но можно задавать start больше end

str.substr(start [, length])- этот позволяет указать длину вместо конечной позиции

-----------------------------------------
str.codePointAt(pos) – возвращает код для символа, находящегося на позиции pos. 
alert( "z".codePointAt(0) ); // 122
----------------------------------------

----------------------------Правильно сравнение--------------------------------

str.localeCompare(str2) возвращает число, которое показывает, какая строка больше в соответствии с правилами языка:
Отрицательное число, если str меньше str2.
Положительное число, если str больше str2.
0, если строки равны.
Например:

alert( 'Österreich'.localeCompare('Zealand') ); // -1
